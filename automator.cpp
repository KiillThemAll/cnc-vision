#include "automator.h"
#include <math.h>

Automator::Automator(QObject *parent) : QObject(parent)
{
    m_working = false;
    m_enabled = false;
    m_mcConnected = false;
    m_cameraConnected = false;
    m_lastdzValid = false;
    m_lastCoordsValid = false;
    m_message = "Waiting for pause";
    m_autosendB = false;
    m_autosendPower = false;
    m_minPower = 1.0;
    m_maxPower = 0.8;
    m_lastSentPower = 0.0;
    m_powerTimer.setInterval(1000); // maximum power update rate [ms]
    m_powerTimer.setSingleShot(true);

    m_mcs_b_initial = 0;
    m_mcs_x_check_state = 0;
    m_mcs_y_check_state = 0;
    m_compensatorOneShot = false;
}

bool Automator::working() const
{
    return m_working;
}

void Automator::ondzChanged(float dz)
{
    m_lastdz = dz;
}

void Automator::ondzValidChanged(bool valid)
{
    m_lastdzValid = valid;
    m_cameraConnected = valid;
    checkWorkingState();
}

void Automator::onMcConnectionStateChanged(bool connected)
{
    m_mcConnected = connected;
    checkWorkingState();
}

void Automator::onRayConnectionStateChanged(bool connected)
{
    m_lastCoordsValid = connected;
}

void Automator::onCoordsChanged(float x, float y, float z, float b)
{
    Q_UNUSED(z);
    m_mcs_x = x;
    m_mcs_y = y;
    m_mcs_b = b;

    if (!m_autosendPower)
        return;

    if (m_maxPower < m_minPower)
        return;

    if (m_powerTimer.isActive())
        return;

    const float maxX = 2200;
    const float minX = 600;
    const float maxY = 1500;
    const float minY = 0;
    const float dPower = 0.01;
    float airPathLength = (maxX - m_mcs_x) + (maxY - m_mcs_y);
    const float maximumAirPathLength = (maxX - minX) + (maxY - minY);
    float powerSpan = m_maxPower - m_minPower;
    float dist = airPathLength / maximumAirPathLength;
    float targetPower = m_minPower + powerSpan * dist;

    if (fabs(targetPower - m_lastSentPower) < dPower)
        return;

    m_lastSentPower = targetPower;
    emit changePower(m_lastSentPower / 5.0);

    m_powerTimer.start();
}

void Automator::onMcStateChanged(RayReceiver::State s)
{
    if (!m_working)
        return;
    if (s == RayReceiver::Paused) {
        if(m_mcs_x_check_state != m_mcs_x || m_mcs_y_check_state != m_mcs_y)
        {
           m_mcs_x_check_state = m_mcs_x;
           m_mcs_y_check_state = m_mcs_y;
           return;
        }

        if (!m_compensatorOneShot)
        {
            QTimer::singleShot(2000, this, SLOT(compensate()));
            m_compensatorOneShot = true;
        }
    }
    if (s == RayReceiver::Playing)
        m_compensatorOneShot = false;
}

void Automator::onCameraStateChanged(CaptureController::Status s)
{
    if (s == CaptureController::Status::Stopped)
    {
        m_cameraConnected = false;
        checkWorkingState();
    }

}

void Automator::compensate()
{
    if (!m_working)
        return;
    float compensated = compensate(m_lastdz);
    if (compensated > 10) {
        m_message = "No entry in comp table";
        emit messageChanged();
    } else {
        float targetB = m_mcs_b_initial + compensated;
        QString correction = QString("G90 G0 B%1\n").arg(targetB);
        m_message = correction;
        emit messageChanged();
        qDebug() << "Command: " << correction;
        if (m_autosendB) {
            emit sendToMC(correction);
            emit sendToMC("M24\n");
        }
    }
}

float Automator::compensate(float dz) const
{
    //                   CAM     ERROR
    const float map[] = {32.9499999999999,	1.90313524759494,
                         32.8499999999999,	1.88791892910538,
                         32.7499999999999,	1.87266162246228,
                         32.6499999999999,	1.85736332766565,
                         32.5499999999999,	1.84202404471547,
                         32.4499999999999,	1.82664377361176,
                         32.3499999999999,	1.8112225143545,
                         32.2499999999999,	1.79576026694371,
                         32.1499999999999,	1.78025703137938,
                         32.0499999999999,	1.76471280766151,
                         31.9499999999999,	1.7491275957901,
                         31.8499999999999,	1.73350139576515,
                         31.7499999999999,	1.71783420758667,
                         31.6499999999999,	1.70212603125464,
                         31.5499999999999,	1.68637686676908,
                         31.4499999999999,	1.67058671412997,
                         31.3499999999999,	1.65475557333733,
                         31.2499999999999,	1.63888344439115,
                         31.1499999999999,	1.62297032729143,
                         31.0499999999999,	1.60701622203817,
                         30.9499999999999,	1.59102112863137,
                         30.8499999999999,	1.57498504707104,
                         30.7499999999999,	1.55890797735716,
                         30.6499999999999,	1.54278991948975,
                         30.5499999999999,	1.52663087346879,
                         30.4499999999999,	1.5104308392943,
                         30.3499999999999,	1.49418981696627,
                         30.2499999999999,	1.4779078064847,
                         30.1499999999999,	1.46158480784959,
                         30.0499999999999,	1.44522082106094,
                         29.9499999999999,	1.42881584611876,
                         29.8499999999999,	1.41236988302303,
                         29.7499999999999,	1.39588293177377,
                         29.6499999999999,	1.37935499237097,
                         29.5499999999999,	1.36278606481462,
                         29.4499999999999,	1.34617614910474,
                         29.3499999999999,	1.32952524524132,
                         29.2499999999999,	1.31283335322436,
                         29.1499999999999,	1.29610047305387,
                         29.0499999999999,	1.27932660472983,
                         28.9499999999999,	1.26251174825226,
                         28.8499999999999,	1.24565590362114,
                         28.7499999999999,	1.22875907083649,
                         28.6499999999999,	1.2118212498983,
                         28.5499999999999,	1.19484244080657,
                         28.4499999999999,	1.1778226435613,
                         28.3499999999999,	1.16076185816249,
                         28.2499999999999,	1.14366008461014,
                         28.1499999999999,	1.12651732290426,
                         28.0499999999999,	1.10933357304483,
                         27.9499999999999,	1.09210883503187,
                         27.8499999999999,	1.07484310886536,
                         27.7499999999999,	1.05753639454532,
                         27.6499999999999,	1.04018869207174,
                         27.5499999999999,	1.02280000144462,
                         27.4499999999999,	1.00537032266396,
                         27.3499999999999,	0.987899655729766,
                         27.2499999999999,	0.97038800064203,
                         27.1499999999999,	0.952835357400755,
                         27.0499999999999,	0.935241726005941,
                         26.9499999999999,	0.917607106457589,
                         26.8499999999999,	0.899931498755697,
                         26.7499999999999,	0.882214902900267,
                         26.6499999999999,	0.864457318891297,
                         26.5499999999999,	0.84665874672879,
                         26.4499999999999,	0.828819186412743,
                         26.3499999999999,	0.810938637943157,
                         26.2499999999999,	0.793017101320032,
                         26.1499999999999,	0.775054576543369,
                         26.0499999999999,	0.757051063613166,
                         25.9499999999999,	0.739006562529424,
                         25.8499999999999,	0.720921073292144,
                         25.7499999999999,	0.702794595901326,
                         25.6499999999999,	0.684627130356968,
                         25.5499999999999,	0.666418676659071,
                         25.4499999999999,	0.648169234807635,
                         25.3499999999999,	0.629878804802661,
                         25.2499999999999,	0.611547386644147,
                         25.1499999999999,	0.593174980332094,
                         25.0499999999999,	0.574761585866503,
                         24.9499999999999,	0.556307203247374,
                         24.8499999999999,	0.537811832474705,
                         24.7499999999999,	0.519275473548496,
                         24.6499999999999,	0.500698126468749,
                         24.5499999999999,	0.482079791235465,
                         24.4499999999999,	0.46342046784864,
                         24.3499999999999,	0.444720156308277,
                         24.2499999999999,	0.425978856614374,
                         24.1499999999999,	0.407196568766934,
                         24.0499999999999,	0.388373292765954,
                         23.9499999999999,	0.369509028611435,
                         23.8499999999999,	0.350603776303377,
                         23.7499999999999,	0.331657535841781,
                         23.6499999999999,	0.312670307226645,
                         23.5499999999999,	0.293642090457971,
                         23.4499999999999,	0.274572885535757,
                         23.3499999999999,	0.255462692460006,
                         23.2499999999999,	0.236311511230715,
                         23.1499999999999,	0.217119341847885,
                         23.0499999999999,	0.197886184311516,
                         22.9499999999999,	0.178612038621609,
                         22.8499999999999,	0.159296904778162,
                         22.7499999999999,	0.139940782781177,
                         22.6499999999999,	0.120543672630652,
                         22.5499999999999,	0.10110557432659,
                         22.4499999999999,	0.0816264878689883,
                         22.3499999999999,	0.0621064132578471,
                         22.2499999999999,	0.0425453504931672,
                         22.1499999999999,	0.0229432995749497,
                         22.0499999999999,	0.00330026050319193,
                         21.9499999999999,	-0.0163837667221047,
                         21.8499999999999,	-0.0361087821009401,
                         21.7499999999999,	-0.0558747856333131,
                         21.6499999999999,	-0.0756817773192263,
                         21.5499999999999,	-0.0955297571586784,
                         21.4499999999999,	-0.115418725151669,
                         21.3499999999999,	-0.135348681298198,
                         21.2499999999999,	-0.155319625598266,
                         21.1499999999999,	-0.175331558051874,
                         21.0499999999999,	-0.19538447865902,
                         20.9499999999999,	-0.215478387419704,
                         20.8499999999999,	-0.235613284333929,
                         20.7499999999999,	-0.255789169401692,
                         20.6499999999999,	-0.276006042622993,
                         20.5499999999999,	-0.296263903997833,
                         20.4499999999999,	-0.316562753526213,
                         20.3499999999999,	-0.336902591208131,
                         20.2499999999999,	-0.357283417043588,
                         20.1499999999999,	-0.377705231032584,
                         20.0499999999999,	-0.398168033175119,
                         19.9499999999999,	-0.418671823471193,
                         19.8499999999999,	-0.439216601920805,
                         19.75,	-0.459802368523956,
                         19.6499999999999,	-0.480429123280647,
                         19.5499999999999,	-0.501096866190876,
                         19.4499999999999,	-0.521805597254644,
                         19.35,	-0.542555316471951,
                         19.25,	-0.563346023842797,
                         19.1499999999999,	-0.584177719367182,
                         19.05,	-0.605050403045105,
                         18.95,	-0.625964074876567,
                         18.85,	-0.646918734861569,
                         18.75,	-0.667914383000109,
                         18.65,	-0.688951019292188,
                         18.55,	-0.710028643737806,
                         18.45,	-0.731147256336963,
                         18.35,	-0.752306857089659,
                         18.25,	-0.773507445995893,
                         18.15,	-0.794749023055666,
                         18.05,	-0.816031588268979,
                         17.95,	-0.83735514163583,
                         17.85,	-0.85871968315622,
                         17.75,	-0.880125212830149,
                         17.65,	-0.901571730657617,
                         17.55,	-0.923059236638624,
                         17.45,	-0.944587730773169,
                         17.35,	-0.966157213061253,
                         17.25,	-0.987767683502877,
                         17.15,	-1.00941914209804,
                         17.05,	-1.03111158884674,
                         16.95,	-1.05284502374898,
                         16.85,	-1.07461944680476,
                         16.75,	-1.09643485801408,
                         16.65,	-1.11829125737693,
                         16.55,	-1.14018864489333,
                         16.45,	-1.16212702056326,
                         16.35,	-1.18410638438674,
                         16.25,	-1.20612673636375,
                         16.15,	-1.2281880764943,
                         16.05,	-1.25029040477839,
                         15.95,	-1.27243372121602,
                         15.85,	-1.29461802580718,
                         15.75,	-1.31684331855189,
                         15.65,	-1.33910959945014,
                         15.55,	-1.36141686850192,
                         15.45,	-1.38376512570724,
                         15.35,	-1.4061543710661,
                         15.25,	-1.42858460457851,
                         15.15,	-1.45105582624445,
                         15.05,	-1.47356803606392,
                         14.95,	-1.49612123403694,
                         14.85,	-1.5187154201635,
                         14.75,	-1.54135059444359,
                         14.65,	-1.56402675687723,
                         14.55,	-1.5867439074644,
                         14.45,	-1.60950204620511,
                         14.35,	-1.63230117309936,
                         14.25,	-1.65514128814715,
                         14.15,	-1.67802239134848,
                         14.05,	-1.70094448270335,
                         13.95,	-1.72390756221175,
                         13.85,	-1.7469116298737,
                         13.75,	-1.76995668568918,
                         13.65,	-1.7930427296582,
                         13.55,	-1.81616976178077,
                         13.45,	-1.83933778205687,
                         13.35,	-1.8625467904865,
                         13.25,	-1.88579678706968,
                         13.15,	-1.9090877718064,
                         13.05,	-1.93241974469666,
                         12.95,	-1.95579270574045,
                         12.85,	-1.97920665493778,
                         12.75,	-2.00266159228866,
                         12.65,	-2.02615751779307,
                         12.55,	-2.04969443145102,
                         12.45,	-2.07327233326251,
                         12.35,	-2.09689122322754,
                         12.25,	-2.1205511013461,
                         12.15,	-2.14425196761821,
                         12.05,	-2.16799382204385,
                         11.95,	-2.19177666462304,
                         11.85,	-2.21560049535576,
                         11.75,	-2.23946531424202,
                         11.65,	-2.26337112128182,
                         11.55,	-2.28731791647516,
                         11.45,	-2.31130569982204,
                         11.35,	-2.33533447132245,
                         11.25,	-2.35940423097641,
                         11.15,	-2.3835149787839,
                         11.05,	-2.40766671474494,
                         10.95,	-2.43185943885951,
                         10.85,	-2.45609315112762,
                         10.75,	-2.48036785154927,
                         10.65,	-2.50468354012446,
                         10.55,	-2.52904021685319,
                         10.45,	-2.55343788173546,
                         10.35,	-2.57787653477126,
                         10.25,	-2.6023561759606,
                         10.15,	-2.62687680530349,
                         10.05,	-2.65143842279991,
                         9.949,	-2.67604102844987,
                         9.849,	-2.70068462225337,
                         9.749,	-2.72536920421041,
                         9.649,	-2.75009477432099,
                         9.549,	-2.7748613325851,
                         9.449,	-2.79966887900276,
                         9.349,	-2.82451741357395,
                         9.249,	-2.84940693629869,
                         9.149,	-2.87433744717696,
                         9.049,	-2.89930894620877,
                         8.949,	-2.92432143339412,
                         8.849,	-2.94937490873301,
                         8.749,	-2.97446937222543,
                         8.649,	-2.9996048238714,
                         8.549,	-3.02478126367091,
                         8.449,	-3.04999869162395,
                         8.349,	-3.07525710773053,
                         8.249,	-3.10055651199066,
                         8.149,	-3.12589690440432,
                         8.049,	-3.15127828497152,
                         7.949,	-3.17670065369225,
                         7.849,	-3.20216401056653,
                         7.749,	-3.22766835559435,
                         7.649,	-3.2532136887757,
                         7.549,	-3.2788000101106,
                         7.449,	-3.30442731959903,
                         7.349,	-3.330095617241,
                         7.249,	-3.35580490303651,
                         7.149,	-3.38155517698556,
                         7.049,	-3.40734643908815,
                         6.949,	-3.43317868934428,
                         6.849,	-3.45905192775394,
                         6.749,	-3.48496615431715,
                         6.65,	-3.51092136903389,
                         6.55,	-3.53691757190417,
                         6.45,	-3.56295476292799,
                         6.35,	-3.58903294210536,
                         6.25,	-3.61515210943625,
                         6.15,	-3.64131226492069,
                         6.05,	-3.66751340855867,
                         5.95,	-3.69375554035019,
                         5.85,	-3.72003866029524,
                         5.75,	-3.74636276839383,
                         5.65,	-3.77272786464597,
                         5.55,	-3.79913394905164,
                         5.45,	-3.82558102161085,
                         5.35,	-3.8520690823236,
                         5.25,	-3.87859813118988,
                         5.15,	-3.90516816820971
                        };
    const int mapSize = sizeof(map) / sizeof(map[0]);
    int range = -1;
    for (int i = 0; i < mapSize - 2; i += 2) {
        if (dz >= map[i + 2] && dz < map[i]) {
            range = i;
            break;
        }
    }
    if (range == -1)
        return 1000;
    float rangeSpan = map[range] - map[range + 2];
    float dist = (dz - map[range + 2]) / rangeSpan;
    float valueSpan = map[range + 1] - map[range + 3];
    return map[range + 3] + valueSpan * dist;
}

void Automator::checkWorkingState()
{
    bool working = m_lastdzValid && m_mcConnected && m_lastCoordsValid && m_enabled && m_cameraConnected;
    if (working != m_working) {
        m_working = working;
        emit workingChanged();
    }
}

float Automator::minPower() const
{
    return m_minPower;
}

void Automator::setMinPower(float minPower)
{
    m_minPower = minPower;
}

float Automator::lastSentPower() const
{
    return m_lastSentPower;
}

float Automator::maxPower() const
{
    return m_maxPower;
}

void Automator::setMaxPower(float maxPower)
{
    m_maxPower = maxPower;
}

bool Automator::autosendPower() const
{
    return m_autosendPower;
}

void Automator::setAutosendPower(bool autosendPower)
{
    m_autosendPower = autosendPower;
}

bool Automator::autosendB() const
{
    return m_autosendB;
}

void Automator::setAutosendB(bool autosendB)
{
    m_autosendB = autosendB;
}

bool Automator::enabled() const
{
    return m_enabled;
}

void Automator::setEnabled(bool enabled)
{
    m_enabled = enabled;
    emit enabledChanged();
    checkWorkingState();
}

QString Automator::message() const
{
    return m_message;
}
